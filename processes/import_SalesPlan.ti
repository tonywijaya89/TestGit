#region Prolog

#****Begin: Generated Header****
if (param_destroy = 1);
   CubeDestroy('Store Sales Plan');
   DimensionDestroy('Store Sales Plan');
if (param_createIfNotExist = 0);
   ProcessQuit;
endif;
endif;
if (param_createIfNotExist = 1);
   if (0 = DimensionExists('Store Sales Plan'));
      DimensionCreate('Store Sales Plan');
      AttrInsert('Store Sales Plan', '', 'Caption_Default', 'A');
      CellPutS('CALCULATION', '}DimensionAttributes', 'Store Sales Plan', 'DIMENSION_TYPE');
      AttrInsert('Store Sales Plan', '', 'Format', 'S');
      AttrInsert('Store Sales Plan', '', 'Picklist', 'S');
      AttrInsert('Store Sales Plan', '', 'signswitch', 'N');
      AttrInsert('Store Sales Plan', '', 'calculation', 'S');
      AttrInsert('Store Sales Plan', '', 'crossdimcalc', 'S');
      SubsetCreateByMDX('All Members', '[Store Sales Plan].MEMBERS', 'Store Sales Plan');
   endif;
   if (0 = CubeExists('Store Sales Plan'));
      CubeCreate('Store Sales Plan', 'Retailers', 'Countries_Currency', 'Products', 'Month', 'Budget version', 'Store Sales Plan');
      CubeSetLogChanges('Store Sales Plan', 1);
      CellPutS('Store Sales Plan', '}CubeAttributes', 'Store Sales Plan', 'Caption_Default');
      if (0 = ViewExists('Store Sales Plan', 'All'));
         ViewCreate('Store Sales Plan', 'All');
         ViewRowDimensionSet('Store Sales Plan', 'All', 'Retailers', 1);
         if (1 = SubsetExists('Retailers', 'All Members'));
            ViewSubsetAssign('Store Sales Plan', 'All', 'Retailers', 'All Members');
         endif;
         ViewColumnDimensionSet('Store Sales Plan', 'All', 'Countries_Currency', 1);
         if (1 = SubsetExists('Countries_Currency', 'All Members'));
            ViewSubsetAssign('Store Sales Plan', 'All', 'Countries_Currency', 'All Members');
         endif;
         ViewTitleDimensionSet('Store Sales Plan', 'All', 'Products');
         if (1 = SubsetExists('Products', 'All Members'));
            ViewSubsetAssign('Store Sales Plan', 'All', 'Products', 'All Members');
         endif;
         ViewTitleElementSet('Store Sales Plan', 'All', 'Products', 0);
         ViewTitleDimensionSet('Store Sales Plan', 'All', 'Month');
         if (1 = SubsetExists('Month', 'All Members'));
            ViewSubsetAssign('Store Sales Plan', 'All', 'Month', 'All Members');
         endif;
         ViewTitleElementSet('Store Sales Plan', 'All', 'Month', 0);
         ViewTitleDimensionSet('Store Sales Plan', 'All', 'Budget version');
         if (1 = SubsetExists('Budget version', 'All Members'));
            ViewSubsetAssign('Store Sales Plan', 'All', 'Budget version', 'All Members');
         endif;
         ViewTitleElementSet('Store Sales Plan', 'All', 'Budget version', 0);
         ViewTitleDimensionSet('Store Sales Plan', 'All', 'Store Sales Plan');
         if (1 = SubsetExists('Store Sales Plan', 'All Members'));
            ViewSubsetAssign('Store Sales Plan', 'All', 'Store Sales Plan', 'All Members');
         endif;
         ViewTitleElementSet('Store Sales Plan', 'All', 'Store Sales Plan', 0);
      endif;
      if (0 = ViewExists('Store Sales Plan', 'Store Sales Plan'));
         ViewCreate('Store Sales Plan', 'Store Sales Plan');
         ViewRowDimensionSet('Store Sales Plan', 'Store Sales Plan', 'Retailers', 1);
         if (1 = SubsetExists('Retailers', 'All Members'));
            ViewSubsetAssign('Store Sales Plan', 'Store Sales Plan', 'Retailers', 'All Members');
         endif;
         ViewColumnDimensionSet('Store Sales Plan', 'Store Sales Plan', 'Store Sales Plan', 1);
         if (1 = SubsetExists('Store Sales Plan', 'All Members'));
            ViewSubsetAssign('Store Sales Plan', 'Store Sales Plan', 'Store Sales Plan', 'All Members');
         endif;
         ViewTitleDimensionSet('Store Sales Plan', 'Store Sales Plan', 'Countries_Currency');
         if (1 = SubsetExists('Countries_Currency', 'All Members'));
            ViewSubsetAssign('Store Sales Plan', 'Store Sales Plan', 'Countries_Currency', 'All Members');
         endif;
         ViewTitleElementSet('Store Sales Plan', 'Store Sales Plan', 'Countries_Currency', 0);
         ViewTitleDimensionSet('Store Sales Plan', 'Store Sales Plan', 'Products');
         if (1 = SubsetExists('Products', 'All Members'));
            ViewSubsetAssign('Store Sales Plan', 'Store Sales Plan', 'Products', 'All Members');
         endif;
         ViewTitleElementSet('Store Sales Plan', 'Store Sales Plan', 'Products', 0);
         ViewTitleDimensionSet('Store Sales Plan', 'Store Sales Plan', 'Month');
         if (1 = SubsetExists('Month', 'All Members'));
            ViewSubsetAssign('Store Sales Plan', 'Store Sales Plan', 'Month', 'All Members');
         endif;
         ViewTitleElementSet('Store Sales Plan', 'Store Sales Plan', 'Month', 0);
         ViewTitleDimensionSet('Store Sales Plan', 'Store Sales Plan', 'Budget version');
         if (1 = SubsetExists('Budget version', 'All Members'));
            ViewSubsetAssign('Store Sales Plan', 'Store Sales Plan', 'Budget version', 'All Members');
         endif;
         ViewTitleElementSet('Store Sales Plan', 'Store Sales Plan', 'Budget version', 0);
      endif;
      CellPutS('Store Sales Plan', '}CubeProperties', 'Store Sales Plan', 'MEASURES_DIMENSION');
   endif;
endif;
CellPutS('Store Sales Plan', '}DimensionAttributes', 'Store Sales Plan', 'Caption_Default');
#****End: Generated Header****

#****Begin: Generated Statements***
if (DIMIX('Store Sales Plan', 'Freight') = 0);
   DimensionElementInsertDirect('Store Sales Plan', '', 'Freight', 'n');
   AttrPutS('d:#,##0.###' | CHARW(12) | 'IC', 'Store Sales Plan', 'Freight', 'Format');
endif;
if (DIMIX('Store Sales Plan', 'Other Sales Revenue') = 0);
   DimensionElementInsertDirect('Store Sales Plan', '', 'Other Sales Revenue', 'n');
   AttrPutS('d:#,##0.###' | CHARW(12) | 'IC', 'Store Sales Plan', 'Other Sales Revenue', 'Format');
endif;
if (DIMIX('Store Sales Plan', 'Other Sales Cost of Goods Sold') = 0);
   DimensionElementInsertDirect('Store Sales Plan', '', 'Other Sales Cost of Goods Sold', 'n');
   AttrPutS('d:#,##0.###' | CHARW(12) | 'IC', 'Store Sales Plan', 'Other Sales Cost of Goods Sold', 'Format');
endif;
if (DIMIX('Store Sales Plan', 'Quantity') = 0);
   DimensionElementInsertDirect('Store Sales Plan', '', 'Quantity', 'n');
   AttrPutS('d:#,##0.##' | CHARW(12) | 'IC', 'Store Sales Plan', 'Quantity', 'Format');
endif;
DimensionSortOrder('Store Sales Plan', '', '', 'ByInput', 'Ascending');
OldCubeLogChanges = CubeGetLogChanges('Store Sales Plan');
CubeSetLogChanges('Store Sales Plan', 0);
#****End: Generated Statements****
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Header****
If(Retailers@='');
   Retailers='Default Retailers';
EndIf;
If(Countries@='');
   Countries='Default Countries';
EndIf;
If(Products@='');
   Products='Default Products';
EndIf;
If(vMonth@='');
   vMonth='Default Month';
EndIf;
If(Budget_version@='');
   Budget_version='Default Budget version';
EndIf;
#****End: Generated Header****

#****Begin: Generated Statements***
CellPutN(Freight, 'Store Sales Plan', Retailers, Countries, Products, vMonth, Budget_version, 'Freight');
CellPutN(Other_Sales_Revenue, 'Store Sales Plan', Retailers, Countries, Products, vMonth, Budget_version, 'Other Sales Revenue');
CellPutN(Other_Sales_Cost_of_Goods_Sold, 'Store Sales Plan', Retailers, Countries, Products, vMonth, Budget_version, 'Other Sales Cost of Goods Sold');
CellPutN(Quantity, 'Store Sales Plan', Retailers, Countries, Products, vMonth, Budget_version, 'Quantity');
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
v_errMsgs = '';
if (DNLEV('Retailers') = 2);
   CellPutS('level000', '}HierarchyProperties', 'Retailers', 'hierarchy0', 'level000');
   CellPutS('level001', '}HierarchyProperties', 'Retailers', 'hierarchy0', 'level001');
else; v_errMsgs = v_errMsgs | 'The resulting hierarchy for the dimension "Retailers" does not align with the level structure defined in the mapping.  When parent-child dimensions are being treated as level based or when level based dimensions are being constructed using source data containing non-unique member identifiers, unexpected hierarchy structures may result. For the case when non-unique member identifiers exist in the source data, turn on the "Qualify member names" dimension property in the mapping page.
';
endif;
RefreshMDXHierarchy('Retailers');
if (DNLEV('Countries_Currency') = 4);
   CellPutS('Countries_Currency', '}HierarchyProperties', 'Countries_Currency', 'hierarchy0', 'level000');
   CellPutS('level001', '}HierarchyProperties', 'Countries_Currency', 'hierarchy0', 'level001');
   CellPutS('level002', '}HierarchyProperties', 'Countries_Currency', 'hierarchy0', 'level002');
   CellPutS('level003', '}HierarchyProperties', 'Countries_Currency', 'hierarchy0', 'level003');
else; v_errMsgs = v_errMsgs | 'The resulting hierarchy for the dimension "Countries_Currency" does not align with the level structure defined in the mapping.  When parent-child dimensions are being treated as level based or when level based dimensions are being constructed using source data containing non-unique member identifiers, unexpected hierarchy structures may result. For the case when non-unique member identifiers exist in the source data, turn on the "Qualify member names" dimension property in the mapping page.
';
endif;
RefreshMDXHierarchy('Countries_Currency');
if (DNLEV('Products') = 3);
   CellPutS('level000', '}HierarchyProperties', 'Products', 'hierarchy0', 'level000');
   CellPutS('level001', '}HierarchyProperties', 'Products', 'hierarchy0', 'level001');
   CellPutS('level002', '}HierarchyProperties', 'Products', 'hierarchy0', 'level002');
else; v_errMsgs = v_errMsgs | 'The resulting hierarchy for the dimension "Products" does not align with the level structure defined in the mapping.  When parent-child dimensions are being treated as level based or when level based dimensions are being constructed using source data containing non-unique member identifiers, unexpected hierarchy structures may result. For the case when non-unique member identifiers exist in the source data, turn on the "Qualify member names" dimension property in the mapping page.
';
endif;
RefreshMDXHierarchy('Products');
if (DNLEV('Month') = 2);
   CellPutS('level000', '}HierarchyProperties', 'Month', 'hierarchy0', 'level000');
   CellPutS('level001', '}HierarchyProperties', 'Month', 'hierarchy0', 'level001');
else; v_errMsgs = v_errMsgs | 'The resulting hierarchy for the dimension "Month" does not align with the level structure defined in the mapping.  When parent-child dimensions are being treated as level based or when level based dimensions are being constructed using source data containing non-unique member identifiers, unexpected hierarchy structures may result. For the case when non-unique member identifiers exist in the source data, turn on the "Qualify member names" dimension property in the mapping page.
';
endif;
RefreshMDXHierarchy('Month');
if (DNLEV('Budget version') = 1);
   CellPutS('level000', '}HierarchyProperties', 'Budget version', 'hierarchy0', 'level000');
else; v_errMsgs = v_errMsgs | 'The resulting hierarchy for the dimension "Budget version" does not align with the level structure defined in the mapping.  When parent-child dimensions are being treated as level based or when level based dimensions are being constructed using source data containing non-unique member identifiers, unexpected hierarchy structures may result. For the case when non-unique member identifiers exist in the source data, turn on the "Qualify member names" dimension property in the mapping page.
';
endif;
RefreshMDXHierarchy('Budget version');
CubeSetLogChanges('Store Sales Plan', OldCubeLogChanges);
if (v_errMsgs @<> '');
   itemReject(v_errMsgs);
endif;
#****End: Generated Statements****
#endregion