#region Prolog

#****Begin: Generated Header****
if (param_destroy = 1);
   CubeDestroy('newstoreplan');
   DimensionDestroy('Country and Region');
   DimensionDestroy('ID numbers');
   DimensionDestroy('Budget version');
   DimensionDestroy('New Stores');
endif;
if (param_createIfNotExist = 1);
   if (0 = DimensionExists('Country and Region'));
      DimensionCreate('Country and Region');
      AttrInsert('Country and Region', '', 'Caption_Default', 'A');
      CellPutS('HIERARCHY', '}DimensionAttributes', 'Country and Region', 'DIMENSION_TYPE');
      SubsetCreateByMDX('All Members', '[Country and Region].MEMBERS', 'Country and Region');
      SubsetAliasSet('Country and Region', 'All Members', 'Caption_Default');
   endif;
   if (0 = DimensionExists('ID numbers'));
      DimensionCreate('ID numbers');
      AttrInsert('ID numbers', '', 'Caption_Default', 'A');
      CellPutS('GENERIC', '}DimensionAttributes', 'ID numbers', 'DIMENSION_TYPE');
      AttrInsert('ID numbers', '', 'Format', 'S');
      AttrInsert('ID numbers', '', 'Picklist', 'S');
      AttrInsert('ID numbers', '', 'calculation', 'S');
      AttrInsert('ID numbers', '', 'crossdimcalc', 'S');
      SubsetCreateByMDX('All Members', '[ID numbers].MEMBERS', 'ID numbers');
      SubsetAliasSet('ID numbers', 'All Members', 'Caption_Default');
   endif;
   if (0 = DimensionExists('Budget version'));
      DimensionCreate('Budget version');
      AttrInsert('Budget version', '', 'Caption_Default', 'A');
      CellPutS('VERSIONS', '}DimensionAttributes', 'Budget version', 'DIMENSION_TYPE');
      AttrInsert('Budget version', '', 'Format', 'S');
      AttrInsert('Budget version', '', 'permittedcalculations_n_and_c', 'S');
      SubsetCreateByMDX('All Members', '[Budget version].MEMBERS', 'Budget version');
      SubsetAliasSet('Budget version', 'All Members', 'Caption_Default');
   endif;
   if (0 = DimensionExists('New Stores'));
      DimensionCreate('New Stores');
      AttrInsert('New Stores', '', 'Caption_Default', 'A');
      CellPutS('CALCULATION', '}DimensionAttributes', 'New Stores', 'DIMENSION_TYPE');
      AttrInsert('New Stores', '', 'Format', 'S');
      AttrInsert('New Stores', '', 'Picklist', 'S');
      AttrInsert('New Stores', '', 'signswitch', 'N');
      AttrInsert('New Stores', '', 'calculation', 'S');
      AttrInsert('New Stores', '', 'crossdimcalc', 'S');
      SubsetCreateByMDX('All Members', '[New Stores].MEMBERS', 'New Stores');
      SubsetAliasSet('New Stores', 'All Members', 'Caption_Default');
   endif;
   if (0 = CubeExists('newstoreplan'));
      CubeCreate('newstoreplan', 'Country and Region', 'ID numbers', 'Budget version', 'New Stores');
      CubeSetLogChanges('newstoreplan', 1);
      CellPutS('New Store Plan', '}CubeAttributes', 'newstoreplan', 'Caption_Default');
      if (0 = ViewExists('newstoreplan', 'All'));
         ViewCreate('newstoreplan', 'All');
         ViewRowDimensionSet('newstoreplan', 'All', 'Country and Region', 1);
         if (1 = SubsetExists('Country and Region', 'All Members'));
            ViewSubsetAssign('newstoreplan', 'All', 'Country and Region', 'All Members');
         endif;
         ViewColumnDimensionSet('newstoreplan', 'All', 'ID numbers', 1);
         if (1 = SubsetExists('ID numbers', 'All Members'));
            ViewSubsetAssign('newstoreplan', 'All', 'ID numbers', 'All Members');
         endif;
         ViewTitleDimensionSet('newstoreplan', 'All', 'Budget version');
         if (1 = SubsetExists('Budget version', 'All Members'));
            ViewSubsetAssign('newstoreplan', 'All', 'Budget version', 'All Members');
         endif;
         ViewTitleElementSet('newstoreplan', 'All', 'Budget version', 0);
         ViewTitleDimensionSet('newstoreplan', 'All', 'New Stores');
         if (1 = SubsetExists('New Stores', 'All Members'));
            ViewSubsetAssign('newstoreplan', 'All', 'New Stores', 'All Members');
         endif;
         ViewTitleElementSet('newstoreplan', 'All', 'New Stores', 0);
      endif;
      if (0 = ViewExists('newstoreplan', 'newstoreplan'));
         ViewCreate('newstoreplan', 'newstoreplan');
         ViewRowDimensionSet('newstoreplan', 'newstoreplan', 'Country and Region', 1);
         if (1 = SubsetExists('Country and Region', 'All Members'));
            ViewSubsetAssign('newstoreplan', 'newstoreplan', 'Country and Region', 'All Members');
         endif;
         ViewColumnDimensionSet('newstoreplan', 'newstoreplan', 'New Stores', 1);
         if (1 = SubsetExists('New Stores', 'All Members'));
            ViewSubsetAssign('newstoreplan', 'newstoreplan', 'New Stores', 'All Members');
         endif;
         ViewTitleDimensionSet('newstoreplan', 'newstoreplan', 'ID numbers');
         if (1 = SubsetExists('ID numbers', 'All Members'));
            ViewSubsetAssign('newstoreplan', 'newstoreplan', 'ID numbers', 'All Members');
         endif;
         ViewTitleElementSet('newstoreplan', 'newstoreplan', 'ID numbers', 0);
         ViewTitleDimensionSet('newstoreplan', 'newstoreplan', 'Budget version');
         if (1 = SubsetExists('Budget version', 'All Members'));
            ViewSubsetAssign('newstoreplan', 'newstoreplan', 'Budget version', 'All Members');
         endif;
         ViewTitleElementSet('newstoreplan', 'newstoreplan', 'Budget version', 0);
      endif;
      CellPutS('New Stores', '}CubeProperties', 'newstoreplan', 'MEASURES_DIMENSION');
   endif;
endif;
CellPutS('Country and Region', '}DimensionAttributes', 'Country and Region', 'Caption_Default');
CellPutS('ID numbers', '}DimensionAttributes', 'ID numbers', 'Caption_Default');
CellPutS('Budget version', '}DimensionAttributes', 'Budget version', 'Caption_Default');
CellPutS('New Stores', '}DimensionAttributes', 'New Stores', 'Caption_Default');
#****End: Generated Header****

#****Begin: Generated Statements***
if (DIMIX('New Stores', 'Retailer Type') = 0);
   DimensionElementInsertDirect('New Stores', '', 'Retailer Type', 's');
endif;
if (DIMIX('New Stores', 'Franchise/Corporate') = 0);
   DimensionElementInsertDirect('New Stores', '', 'Franchise/Corporate', 's');
endif;
if (DIMIX('New Stores', 'Asset Type') = 0);
   DimensionElementInsertDirect('New Stores', '', 'Asset Type', 's');
endif;
if (DIMIX('New Stores', 'Size') = 0);
   DimensionElementInsertDirect('New Stores', '', 'Size', 's');
endif;
if (DIMIX('New Stores', 'Month of Opening') = 0);
   DimensionElementInsertDirect('New Stores', '', 'Month of Opening', 's');
endif;
if (DIMIX('New Stores', 'Number of New Stores') = 0);
   DimensionElementInsertDirect('New Stores', '', 'Number of New Stores', 's');
endif;
DimensionSortOrder('Country and Region', '', '', 'ByInput', 'DESCENDING');
DimensionSortOrder('ID numbers', '', '', 'ByInput', 'DESCENDING');
DimensionSortOrder('Budget version', '', '', 'ByInput', 'DESCENDING');
DimensionSortOrder('New Stores', '', '', 'ByInput', 'Ascending');
OldCubeLogChanges = CubeGetLogChanges('newstoreplan');
CubeSetLogChanges('newstoreplan', 0);
ViewZeroOut('newstoreplan', 'newstoreplan');
#****End: Generated Statements****
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data



#****Begin: Generated Statements***
DimensionElementInsertDirect('Country and Region', '', v_Region_0, 'n');
DimensionElementInsertDirect('ID numbers', '', v_ID_Numbers_1, 'n');
DimensionElementInsertDirect('Budget version', '', v_Budget_version_2, 'n');
CellPutS(v_Retailer_Type_3, 'newstoreplan', v_Region_0, v_ID_Numbers_1, v_Budget_version_2, 'Retailer Type');
CellPutS(v_Franchise_Corporate_4, 'newstoreplan', v_Region_0, v_ID_Numbers_1, v_Budget_version_2, 'Franchise/Corporate');
CellPutS(v_Asset_Type_5, 'newstoreplan', v_Region_0, v_ID_Numbers_1, v_Budget_version_2, 'Asset Type');
CellPutS(v_Size_6, 'newstoreplan', v_Region_0, v_ID_Numbers_1, v_Budget_version_2, 'Size');
CellPutS(v_Month_of_Opening_7, 'newstoreplan', v_Region_0, v_ID_Numbers_1, v_Budget_version_2, 'Month of Opening');
CellPutS(v_Number_of_New_Stores_8, 'newstoreplan', v_Region_0, v_ID_Numbers_1, v_Budget_version_2, 'Number of New Stores');
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
v_errMsgs = '';
if (DNLEV('Country and Region') = 2);
   CellPutS('level000', '}HierarchyProperties', 'Country and Region', 'hierarchy0', 'level000');
   CellPutS('level001', '}HierarchyProperties', 'Country and Region', 'hierarchy0', 'level001');
else; v_errMsgs = v_errMsgs | 'The resulting hierarchy for the dimension "Country and Region" does not align with the level structure defined in the mapping.  When parent-child dimensions are being treated as level based or when level based dimensions are being constructed using source data containing non-unique member identifiers, unexpected hierarchy structures may result. For the case when non-unique member identifiers exist in the source data, turn on the "Qualify member names" dimension property in the mapping page.
';
endif;
RefreshMDXHierarchy('Country and Region');
if (DNLEV('ID numbers') = 1);
   CellPutS('level000', '}HierarchyProperties', 'ID numbers', 'hierarchy0', 'level000');
else; v_errMsgs = v_errMsgs | 'The resulting hierarchy for the dimension "ID numbers" does not align with the level structure defined in the mapping.  When parent-child dimensions are being treated as level based or when level based dimensions are being constructed using source data containing non-unique member identifiers, unexpected hierarchy structures may result. For the case when non-unique member identifiers exist in the source data, turn on the "Qualify member names" dimension property in the mapping page.
';
endif;
RefreshMDXHierarchy('ID numbers');
if (DNLEV('Budget version') = 1);
   CellPutS('level000', '}HierarchyProperties', 'Budget version', 'hierarchy0', 'level000');
else; v_errMsgs = v_errMsgs | 'The resulting hierarchy for the dimension "Budget version" does not align with the level structure defined in the mapping.  When parent-child dimensions are being treated as level based or when level based dimensions are being constructed using source data containing non-unique member identifiers, unexpected hierarchy structures may result. For the case when non-unique member identifiers exist in the source data, turn on the "Qualify member names" dimension property in the mapping page.
';
endif;
RefreshMDXHierarchy('Budget version');
CubeSetLogChanges('newstoreplan', OldCubeLogChanges);
if (v_errMsgs @<> '');
   itemReject(v_errMsgs);
endif;
#****End: Generated Statements****
#endregion